name: Deploy Backend to Cloud Run

# Deploy backend when:
# 1. Code is pushed to main branch (affecting backend server)
# 2. Manually triggered via workflow_dispatch
on:
  push:
    branches:
      - main
    paths:
      - 'coffee-website-react/server/**'
      - '.github/workflows/deploy-backend.yml'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy-backend:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker

      - name: Set deployment variables
        id: vars
        run: |
          echo "SERVICE_NAME=coffee-copilot-backend" >> $GITHUB_OUTPUT
          echo "REGION=us-central1" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=gcr.io/${{ secrets.GCP_PROJECT_ID }}/coffee-copilot-backend:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "IMAGE_LATEST=gcr.io/${{ secrets.GCP_PROJECT_ID }}/coffee-copilot-backend:latest" >> $GITHUB_OUTPUT

      - name: Build Docker image
        working-directory: coffee-website-react/server
        run: |
          docker build \
            -t ${{ steps.vars.outputs.IMAGE_NAME }} \
            -t ${{ steps.vars.outputs.IMAGE_LATEST }} \
            .

      - name: Push Docker image to GCR
        run: |
          docker push ${{ steps.vars.outputs.IMAGE_NAME }}
          docker push ${{ steps.vars.outputs.IMAGE_LATEST }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ steps.vars.outputs.SERVICE_NAME }} \
            --image ${{ steps.vars.outputs.IMAGE_NAME }} \
            --region ${{ steps.vars.outputs.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances 0 \
            --max-instances 10 \
            --memory 512Mi \
            --cpu 1 \
            --timeout 300 \
            --set-env-vars "NODE_ENV=production,PORT=8080" \
            --update-secrets "OPENAI_API_KEY=openai-api-key:latest,GEMINI_API_KEY=gemini-api-key:latest,STRIPE_SECRET_KEY=stripe-secret-key:latest" \
            --port 8080

      - name: Get service URL
        id: service
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ steps.vars.outputs.SERVICE_NAME }} \
            --region ${{ steps.vars.outputs.REGION }} \
            --format "value(status.url)")
          echo "url=${SERVICE_URL}" >> $GITHUB_OUTPUT
          echo "Service URL: ${SERVICE_URL}"

      - name: Test health endpoint
        run: |
          sleep 10  # Wait for service to be ready
          curl -f ${{ steps.service.outputs.url }}/api/health || exit 1

      - name: Create deployment summary
        run: |
          echo "## üöÄ Backend Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** coffee-copilot-backend" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.service.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ steps.vars.outputs.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ steps.vars.outputs.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the backend:" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   curl ${{ steps.service.outputs.url }}/api/health" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. Update frontend environment variable (if not set):" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   echo -n \"${{ steps.service.outputs.url }}/api/chat\" | gh secret set VITE_COPILOT_API_URL" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "3. Trigger a frontend redeployment to use the new backend" >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('‚úÖ Backend deployment to Cloud Run successful!');
            console.log('URL: ${{ steps.service.outputs.url }}');

      - name: Notify deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.error('‚ùå Backend deployment to Cloud Run failed!');
            core.setFailed('Deployment failed. Check the logs for details.');
