name: Generate Weekly Content

# Runs every Sunday at 3:00 AM UTC
# Can also be triggered manually via GitHub UI or CLI
on:
  schedule:
    - cron: '0 3 * * 0' # Every Sunday at 3:00 AM UTC
  workflow_dispatch: # Allow manual triggering
    inputs:
      season:
        description: 'Force specific season (leave empty for auto-detect)'
        required: false
        type: choice
        options:
          - ''
          - winter
          - spring
          - summer
          - autumn
      holiday:
        description: 'Force specific holiday (leave empty for auto-detect)'
        required: false
        type: string
      video_count:
        description: 'Number of videos to generate'
        required: false
        default: '1'
        type: string
      photo_count:
        description: 'Number of photos to generate'
        required: false
        default: '2'
        type: string

jobs:
  generate-content:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Veo video generation can take 10-15 minutes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          cd coffee-website-react
          npm ci

      - name: Install Firebase Admin SDK
        run: |
          npm install -g firebase-tools
          npm install firebase-admin

      - name: Set up Firebase credentials
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT" > $HOME/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase-service-account.json" >> $GITHUB_ENV

      - name: Detect current season and holiday
        id: detect-season
        run: |
          # Run detection script
          node .claude/skills/ai-content-manager/scripts/detect_season.js > season-info.json

          # Parse results and set outputs
          SEASON=$(jq -r '.season' season-info.json)
          HOLIDAY=$(jq -r '.holiday' season-info.json)

          # Use manual inputs if provided, otherwise use detected
          FINAL_SEASON="${{ github.event.inputs.season || '${SEASON}' }}"
          FINAL_HOLIDAY="${{ github.event.inputs.holiday || '${HOLIDAY}' }}"

          echo "season=${FINAL_SEASON}" >> $GITHUB_OUTPUT
          echo "holiday=${FINAL_HOLIDAY}" >> $GITHUB_OUTPUT

          echo "Detected season: ${SEASON}"
          echo "Detected holiday: ${HOLIDAY}"
          echo "Using season: ${FINAL_SEASON}"
          echo "Using holiday: ${FINAL_HOLIDAY}"

      - name: Generate AI content
        id: generate
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          SEASON: ${{ steps.detect-season.outputs.season }}
          HOLIDAY: ${{ steps.detect-season.outputs.holiday }}
          VIDEO_COUNT: ${{ github.event.inputs.video_count || '1' }}
          PHOTO_COUNT: ${{ github.event.inputs.photo_count || '2' }}
        run: |
          echo "Generating content for season: $SEASON, holiday: $HOLIDAY"
          echo "Videos: $VIDEO_COUNT, Photos: $PHOTO_COUNT"

          # Run content generation script
          node .claude/skills/ai-content-manager/scripts/generate_content.js \
            --season="$SEASON" \
            --holiday="$HOLIDAY" \
            --videos="$VIDEO_COUNT" \
            --photos="$PHOTO_COUNT" \
            --output-dir="./generated-content"

          # Save generation report
          echo "Content generation completed!"

      - name: Upload to Firebase Storage
        id: upload
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          SEASON: ${{ steps.detect-season.outputs.season }}
          HOLIDAY: ${{ steps.detect-season.outputs.holiday }}
        run: |
          echo "Uploading generated content to Firebase Storage..."

          # Run upload script
          node .claude/skills/ai-content-manager/scripts/upload_to_firebase.js \
            --content-dir="./generated-content" \
            --season="$SEASON" \
            --holiday="$HOLIDAY"

          echo "Upload completed!"

      - name: Create Firestore documents
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "Creating Firestore metadata documents..."

          # Run Firestore creation script
          node .claude/skills/ai-content-manager/scripts/create_firestore_docs.js \
            --manifest="./generated-content/manifest.json"

          echo "Firestore documents created!"

      - name: Update rotation config
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "Updating content rotation configuration..."

          # Add new content to active rotation pool
          node .claude/skills/ai-content-manager/scripts/update_rotation_config.js \
            --manifest="./generated-content/manifest.json" \
            --section="hero"

          echo "Rotation config updated!"

      - name: Clean up temporary files
        if: always()
        run: |
          rm -rf ./generated-content
          rm -f $HOME/firebase-service-account.json
          rm -f season-info.json

      - name: Report generation summary
        if: success()
        run: |
          echo "✅ Weekly content generation completed successfully!"
          echo "Season: ${{ steps.detect-season.outputs.season }}"
          echo "Holiday: ${{ steps.detect-season.outputs.holiday }}"
          echo "Videos generated: ${{ github.event.inputs.video_count || '1' }}"
          echo "Photos generated: ${{ github.event.inputs.photo_count || '2' }}"

      - name: Send notification (optional)
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          # Uncomment if you want Slack notifications
          # curl -X POST "$SLACK_WEBHOOK" \
          #   -H 'Content-Type: application/json' \
          #   -d '{
          #     "text": "✅ Weekly AI content generated successfully!",
          #     "blocks": [{
          #       "type": "section",
          #       "text": {
          #         "type": "mrkdwn",
          #         "text": "*Weekly Content Generation*\n• Season: ${{ steps.detect-season.outputs.season }}\n• Holiday: ${{ steps.detect-season.outputs.holiday }}\n• Videos: ${{ github.event.inputs.video_count || 1 }}\n• Photos: ${{ github.event.inputs.photo_count || 2 }}"
          #       }
          #     }]
          #   }'
          echo "Notification step (currently disabled)"

      - name: Handle failure
        if: failure()
        run: |
          echo "❌ Content generation failed!"
          echo "Check the logs above for error details."
          # Optionally send failure notification
          # curl -X POST "$SLACK_WEBHOOK" \
          #   -H 'Content-Type: application/json' \
          #   -d '{"text": "❌ Weekly content generation failed! Check GitHub Actions logs."}'

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: generation-logs
          path: |
            ./generated-content/**/*.log
            ./generated-content/manifest.json
          retention-days: 7
